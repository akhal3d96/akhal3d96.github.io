{"version":3,"sources":["cardsData.js","findCard.js","cardId.js","helpers.js","features/cardSlice.js","generateCardsInfo.js","CardInfo.js","findCards.js","components/CardCell.js","newCardPosition.js","components/dropCard.js","components/Card.js","components/generateCards.js","components/CardsPositionCell.js","components/BottomCards.js","components/CardPositionsTopCells.js","components/Deck.js","components/TopCards.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cardSymbols","name","symbol","color","cardNumbers","map","rank","index","ItemTypes","findCard","cardId","state","find","cardInfo","id","pipe","fns","x","reduce","v","f","shuffle","arr","Array","isArray","Error","random","temp","rng","Math","collection","slice","len","length","floor","cardSlice","createSlice","initialState","finalArray","cardsPositionArray","flatMap","isBack","stack","Infinity","position","CardInfo","counter","cardPostionsSeg","splice","card","push","concat","flat","generateCardsInfo","reducers","move","action","payload","newPosition","flip","stackPush","stackNumber","actions","selectCards","indexValue","e","findCards","cardsStore","key","value","filter","sort","a","b","aIndex","CardCell","React","forwardRef","props","ref","children","isOver","style","cardPositionStyle","Object","assign","backgroundColor","className","displayName","newCardPosition","dropCard","dispatch","item","Card","isDeck","useDrag","type","canDrag","monitor","collect","isDragging","drag","cardClassName","classNames","back","cardStyle","opacity","cursor","generateCards","cardsInfo","CardsPositionCell","useState","setIsOver","cards","setCards","lastCard","setLastCard","useSelector","useDispatch","useEffect","useDrop","accept","canDrop","store","cardsCellId","toBeDroppedCard","cardsCellCode","toString","charCodeAt","firstCell","lastCell","isAtTopCells","undefined","rules","drop","draggedCardInfo","forEach","lastCardStack","hover","BottomCards","initialDropRule","stackSymbol","currentStackCardsIndex","CardPositionsTopCells","setCurrentStackCardsIndex","setStackSymbol","checkIfUserWon","alert","Deck","prevCardId","setPrevCardId","drawCard","cardState","newCardPositionInfo","onClick","selectRandomCard","TopCards","marginRight","App","dragBackEnd","window","navigator","MaxTouchPoints","msMaxTouchPoints","TouchBackend","HTML5Backend","DndProvider","backend","configureStore","reducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d57115e3.chunk.js","sourcesContent":["\nexport const cardSymbols = [\n  { name: 'clubs', symbol: '♣', color: 'black' },\n  { name: 'diams', symbol: '♦', color: 'red' },\n  { name: 'hearts', symbol: '♥', color: 'red' },\n  { name: 'spades', symbol: '♠', color: 'black' }\n]\n\nexport const cardNumbers = [\n  'A',\n  '2', '3', '4', '5', '6', '7', '8', '9', '10',\n  'J', 'Q', 'K'\n].map((rank, index) => ({ rank, index }))\n\nexport const ItemTypes = {\n  CARD: 'card'\n}\n","export default function findCard (cardId, state) {\n  return state.find(cardInfo => cardInfo.id === cardId)\n}\n","export default function cardId (rank, name) {\n  return `${rank}-${name}`\n}\n","export function randomBetween (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x)\n\nexport function sample (arr) {\n  const randIndex = Math.floor(Math.random() * arr.length)\n  return arr[randIndex]\n}\n\n/**\n * Randomize the order of the elements in a given array.\n * source: https://github.com/pazguille/shuffle-array/blob/master/dist/shuffle-array.js\n * @param {Array} arr - The given array.\n * @returns {Array}\n */\nexport function shuffle (arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle expect an array as parameter.')\n  }\n\n  const rng = Math.random\n  const collection = arr.slice()\n\n  let len = arr.length\n  let random, temp\n\n  while (len) {\n    random = Math.floor(rng() * len)\n    len -= 1\n    temp = collection[len]\n    collection[len] = collection[random]\n    collection[random] = temp\n  }\n\n  return collection\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { ItemTypes } from '../cardsData'\nimport findCard from '../findCard'\nimport generateCardsInfo from '../generateCardsInfo'\n\nexport const cardSlice = createSlice({\n  name: ItemTypes.CARD,\n  initialState: generateCardsInfo(),\n  reducers: {\n    move: (state, action) => {\n      const { payload } = action\n      const { cardId, newPosition } = payload\n\n      const cardInfo = findCard(cardId, state)\n\n      cardInfo.position = newPosition\n    },\n    flip: (state, action) => {\n      const cardId = action.payload\n      const cardInfo = findCard(cardId, state)\n\n      cardInfo.isBack = false\n      cardInfo.stack = 0\n    },\n    stackPush: (state, action) => {\n      const { payload } = action\n      const { cardId, stackNumber } = payload\n\n      const cardInfo = findCard(cardId, state)\n      cardInfo.stack = stackNumber\n    }\n  }\n})\n\nexport const { move, flip, stackPush } = cardSlice.actions\n\nexport const selectCards = state => state\n","import { CardInfo } from './CardInfo'\nimport { cardNumbers, cardSymbols } from './cardsData'\nimport { shuffle } from './helpers'\n\nexport default function generateCardsInfo () {\n  const finalArray = []\n  const cardsPositionArray = shuffle(cardSymbols\n    .flatMap(({ name, symbol, color }) =>\n      cardNumbers.map(({ rank, index }) => CardInfo({ rank, index, name, symbol, color }))\n    )\n  )\n\n  for (let counter = 1; counter <= 7; counter++) {\n    const cardPostionsSeg = cardsPositionArray\n      .splice(0, counter)\n      .map(card => {\n        return {\n          ...card, position: counter\n        }\n      })\n    finalArray.push(cardPostionsSeg)\n  }\n\n  return finalArray.concat(cardsPositionArray).flat()\n}\n","import cardId from './cardId'\n\nexport function CardInfo ({ rank, index, name, color, id, symbol, isBack, stack }) {\n  return {\n    id: id || cardId(rank, name),\n    isBack: isBack || true,\n    stack: stack || -Infinity,\n    position: 0,\n    name,\n    rank,\n    index,\n    color,\n    symbol\n  }\n}\n","function indexValue (e) {\n  return e.isBack ? Infinity : e.index\n}\n\nexport default function findCards (cardsStore, key, value) {\n  return cardsStore\n    .filter(cardInfo => cardInfo[key] === value)\n    .sort((a, b) => {\n      const aIndex = indexValue(a)\n      const bIndex = indexValue(b)\n\n      return bIndex - aIndex\n    })\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const CardCell = React.forwardRef((props, ref) => {\n  const { children, isOver, style } = props\n\n  const cardPositionStyle = Object.assign(isOver ? { backgroundColor: '#FFFF00' } : {}, style)\n\n  return (\n    <div className=\"column\" ref={ref}>\n      <div className='card-position deck' style={cardPositionStyle} >\n        {children}\n      </div>\n    </div>\n  )\n})\n\nCardCell.displayName = 'CardCell'\nCardCell.propTypes = {\n  children: PropTypes.array,\n  style: PropTypes.object,\n  isOver: PropTypes.bool\n}\n\nexport default CardCell\n","export default function newCardPosition (cardId, newPosition) {\n  return {\n    cardId,\n    newPosition\n  }\n}\n","import { move } from '../features/cardSlice'\nimport newCardPosition from '../newCardPosition'\n\nexport default function dropCard (dispatch, item, id) {\n  const payload = newCardPosition(item.cardId, id)\n  return dispatch(move(payload))\n}\n","import classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { useDrag } from 'react-dnd'\nimport { ItemTypes } from '../cardsData'\n\nexport default function Card (props) {\n  const { rank, symbol, name, id, isBack, isDeck } = props\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD, cardId: id },\n    canDrag: monitor => !isBack,\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  })\n\n  const cardClassName = classNames(isDeck ? 'deck' : 'card', `rank-${rank}`, name, { back: isBack })\n  const cardStyle = {\n    opacity: isDragging ? 0.5 : 1,\n    cursor: isBack ? 'auto' : 'grab'\n  }\n\n  return (\n    <div className=\"playingCards fourColours stack\" ref={drag} style={cardStyle}>\n      <div className={cardClassName} >\n        {!isBack &&\n        (<>\n          <span className=\"rank\">{rank}</span>\n          <span className=\"suite\">{symbol}</span>\n        </>)\n        }\n      </div>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  rank: PropTypes.string.isRequired,\n  symbol: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  color: PropTypes.string,\n  isBack: PropTypes.bool,\n  isDeck: PropTypes.bool,\n  id: PropTypes.string\n}\n","import React from 'react'\nimport Card from './Card'\n\nexport default function generateCards (cardsInfo) {\n  return cardsInfo\n    .map(({ name, rank, symbol, id, color, isBack, index }) =>\n      <Card key={id} id={id} index={index} name={name} rank={rank} symbol={symbol} color={color} isBack={isBack}/>\n    )\n}\n","import PropTypes from 'prop-types'\nimport React, { useEffect, useState } from 'react'\nimport { useDrop } from 'react-dnd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ItemTypes } from '../cardsData'\nimport { flip, selectCards, stackPush } from '../features/cardSlice'\nimport findCard from '../findCard'\nimport findCards from '../findCards'\nimport { pipe } from '../helpers'\nimport CardCell from './CardCell'\nimport dropCard from './dropCard'\nimport generateCards from './generateCards'\n\nfunction isAtTopCells (cardsCellId) {\n  const cardsCellCode = cardsCellId.toString().charCodeAt()\n  const firstCell = 'B'.charCodeAt()\n  const lastCell = 'E'.charCodeAt()\n\n  if (cardsCellCode <= firstCell || cardsCellCode >= lastCell) return false\n\n  return true\n}\n\nfunction rules (store, item, lastCard, cardsCellId) {\n  const { cardId } = item\n  const toBeDroppedCard = findCard(cardId, store)\n\n  if (isAtTopCells(cardsCellId)) return false\n\n  if (lastCard === undefined) return true\n  if ((lastCard.index - toBeDroppedCard.index) !== 1) return false\n  if (toBeDroppedCard.color === lastCard.color) return false\n\n  return true\n}\n\nexport default function CardsPositionCell ({ id, style = {} }) {\n  const [isOver, setIsOver] = useState(false)\n  const [cards, setCards] = useState([])\n  const [lastCard, setLastCard] = useState()\n\n  const { cardsInfo } = useSelector(selectCards)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    setCards(findCards(cardsInfo, 'position', id))\n  }, [cardsInfo])\n\n  useEffect(() => {\n    setLastCard(cards[cards.length - 1])\n  }, [cards])\n\n  useEffect(() => {\n    lastCard && pipe(flip, dispatch)(lastCard.id)\n  }, [lastCard])\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    canDrop: (item, monitor) => rules(cardsInfo, item, lastCard, id),\n    drop: item => {\n      const draggedCardInfo = findCard(item.cardId, cardsInfo)\n\n      cardsInfo\n        .filter(cardInfo => {\n          return cardInfo.position === draggedCardInfo.position &&\n          cardInfo.stack >= draggedCardInfo.stack\n        })\n        .forEach(cardInfo => {\n          dropCard(dispatch, { cardId: cardInfo.id }, id)\n          const lastCardStack = lastCard ? lastCard.stack : 0\n          pipe(stackPush, dispatch)({ cardId: cardInfo.id, stackNumber: lastCardStack + 1 })\n        })\n\n      setIsOver(false)\n    },\n    hover: () => setIsOver(true)\n  })\n\n  return (\n    <CardCell ref={drop} style={style} isOver={isOver}>\n      {generateCards(cards)}\n    </CardCell>\n  )\n}\n\nCardsPositionCell.propTypes = {\n  id: PropTypes.number,\n  style: PropTypes.object\n}\n","import React from 'react'\nimport CardsPositionCell from './CardsPositionCell'\n\nexport default function BottomCards () {\n  return (\n    <div className=\"columns my-4\">\n      <CardsPositionCell id={1} />\n      <CardsPositionCell id={2} />\n      <CardsPositionCell id={3} />\n      <CardsPositionCell id={4} />\n      <CardsPositionCell id={5} />\n      <CardsPositionCell id={6} />\n      <CardsPositionCell id={7} />\n    </div>\n  )\n}\n","import PropTypes from 'prop-types'\nimport React, { useState } from 'react'\nimport { useDrop } from 'react-dnd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ItemTypes } from '../cardsData'\nimport { selectCards } from '../features/cardSlice'\nimport findCards from '../findCards'\nimport CardCell from './CardCell'\nimport dropCard from './dropCard'\nimport generateCards from './generateCards'\n\nfunction checkIfUserWon (cardsInfo) {\n  const BCells = cardsInfo.filter(cardInfo => cardInfo.position === 'B').length\n  const CCells = cardsInfo.filter(cardInfo => cardInfo.position === 'C').length\n  const DCells = cardsInfo.filter(cardInfo => cardInfo.position === 'D').length\n  const ECells = cardsInfo.filter(cardInfo => cardInfo.position === 'E').length\n\n  return BCells === CCells === DCells === ECells === 13\n}\n\nfunction initialDropRule (stackSymbol, currentStackCardsIndex, cardId) {\n  return !stackSymbol /* is undefined */ &&\n  !currentStackCardsIndex /* is zero */ &&\n  !cardId /* is zero */\n}\n\nfunction rules (cardsInfo, item, stackSymbol, currentStackCardsIndex) {\n  const cardInfo = cardsInfo.find(cardInfo => cardInfo.id === item.cardId)\n\n  // Initial\n  if (initialDropRule(stackSymbol, currentStackCardsIndex, cardInfo.index)) return true\n\n  // Check symbol\n  if (cardInfo.symbol !== stackSymbol) return false\n\n  // Check index\n  if (cardInfo.index === currentStackCardsIndex) return true\n\n  // if ((currentStackCardsIndex - cardInfo.index) === 1) return true\n  return false\n}\n\nexport default function CardPositionsTopCells ({ id, style = {} }) {\n  const [isOver, setIsOver] = useState(false)\n  const [currentStackCardsIndex, setCurrentStackCardsIndex] = useState(0)\n  const [stackSymbol, setStackSymbol] = useState()\n\n  const { cardsInfo } = useSelector(selectCards)\n  const dispatch = useDispatch()\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    canDrop: (item, monitor) => rules(cardsInfo, item, stackSymbol, currentStackCardsIndex),\n    drop: item => {\n      const cardInfo = cardsInfo.find(cardInfo => cardInfo.id === item.cardId)\n      if (initialDropRule(stackSymbol, currentStackCardsIndex, item.index)) {\n        setStackSymbol(cardInfo.symbol)\n      }\n\n      setCurrentStackCardsIndex(currentStackCardsIndex + 1)\n      setIsOver(false)\n      dropCard(dispatch, item, id)\n\n      if (checkIfUserWon(cardsInfo)) alert('You won!')\n    },\n    hover: () => setIsOver(true)\n  })\n\n  const cards = findCards(cardsInfo, 'position', id)\n\n  return (\n    <CardCell ref={drop} style={style} isOver={isOver} isDeck={true}>\n      {generateCards(cards)[0]}\n    </CardCell>\n  )\n}\n\nCardPositionsTopCells.propTypes = {\n  id: PropTypes.string,\n  style: PropTypes.object\n}\n","import PropTypes from 'prop-types'\nimport React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { move, flip, selectCards } from '../features/cardSlice'\nimport { pipe, shuffle } from '../helpers'\nimport newCardPosition from '../newCardPosition'\n\nfunction selectRandomCard (cardsInfo, drawCard) {\n  const card = shuffle(cardsInfo).find(cardInfo => cardInfo.position === 0)\n  drawCard(card.id)\n}\n\nexport default function Deck () {\n  const { cardsInfo } = useSelector(selectCards)\n  const dispatch = useDispatch()\n  const [prevCardId, setPrevCardId] = useState(null)\n\n  const drawCard = cardId => {\n    if (prevCardId) {\n      const cardState = cardsInfo.find(cardState => cardState.id === prevCardId)\n\n      if (cardState.position === 'A') pipe(move, dispatch)(newCardPosition(prevCardId, 0))\n    }\n    // Draw a new card\n    const newCardPositionInfo = newCardPosition(cardId, 'A')\n    // console.log(newCardPositionInfo)\n    pipe(move, dispatch)(newCardPositionInfo)\n    pipe(flip, dispatch)(cardId)\n\n    setPrevCardId(newCardPositionInfo.cardId)\n  }\n\n  return (\n    <div className=\"column\" onClick={() => selectRandomCard(cardsInfo, drawCard)}>\n      <div className=\"playingCards\">\n        <div className=\"card back\" >\n        </div>\n      </div>\n    </div>\n  )\n}\n\nDeck.propTypes = {\n  cardsPosition: PropTypes.array\n}\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport Card from './Card'\nimport CardPositionsTopCells from './CardPositionsTopCells'\nimport Deck from './Deck'\n\nexport default function TopCards ({ cards }) {\n  return (\n    <div className=\"columns top-column\">\n      <Deck/>\n      <CardPositionsTopCells id=\"A\" cards={cards} style={{ marginRight: '15rem' }} />\n      <CardPositionsTopCells id=\"B\" cards={cards} />\n      <CardPositionsTopCells id=\"C\" cards={cards} />\n      <CardPositionsTopCells id=\"D\" cards={cards} />\n      <CardPositionsTopCells id=\"E\" cards={cards} />\n    </div>\n  )\n}\n\nTopCards.propTypes = {\n  cards: PropTypes.arrayOf(Card)\n}\n","import React from 'react'\r\nimport { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { TouchBackend } from 'react-dnd-touch-backend'\r\nimport './App.scss'\r\nimport BottomCards from './components/BottomCards'\r\nimport TopCards from './components/TopCards'\r\n\r\nfunction isMobile () {\r\n  return ('ontouchstart' in window) || (navigator.MaxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)\r\n}\r\n\r\nfunction App () {\r\n  const dragBackEnd = isMobile() ? TouchBackend : HTML5Backend\r\n  return (\r\n    <>\r\n      <div className=\"section\">\r\n        <div className=\"container\">\r\n          <DndProvider backend={dragBackEnd}>\r\n            <TopCards />\r\n            <BottomCards />\r\n          </DndProvider>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { cardSlice } from '../features/cardSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    cardsInfo: cardSlice.reducer\r\n  }\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}